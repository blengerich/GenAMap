//// Created by aditya gautam on 4/2/16.//#ifndef ALGORITHMS_GRIDSEARCH_HPP#define ALGORITHMS_GRIDSEARCH_HPP#include <iostream>#include <vector>#include <math.h>#include <cstdlib>#include <iostream>#ifdef BAZEL#include "Algorithms/Algorithm.hpp"#include "Models/LinearMixedModel.hpp"#else#include "Algorithm.hpp"#include "../Models/LinearMixedModel.hpp"#endifusing namespace std;class GridSearch:public Algorithm{private:    // Lambda interval and boundary dimensions    float lambda_start_point;    float lambda_end_point;    float lambda_interval;    void shift_lambda_window(float);    static constexpr float default_lambda_start_point = -10.0;    static constexpr float default_lambda_end_point = 10.0;    static constexpr float default_lambda_interval = 0.2;    public:    // Default constructor    GridSearch();    GridSearch(const unordered_map<string, string>);    // Parameters related to lambda variation    void set_lambda_params(float, float, float);    void set_lambda_start_value(float);    void set_lambda_end_value(float);    void set_lambda_interval(float);    float get_lambda_interval();    float get_lambda_start_value();    float get_lambda_end_value();    void run(Model*);    void run(LinearMixedModel *);};#endif