/*
 * This is a server-side port of the script that generates the for SVG of the matrix chart. 
 * I've currently set it to pipe the output to a file, but this can be served 
 * directly as a svg string through nodejs, in response to a request from the client. 
 *
 * Dependencies: 
 * - d3-node
 * - d3-scale
 * install with `npm i <dependency> on the server
 *
 */

const fs = require('fs')
const D3Node = require('d3-node')
const d3n = new D3Node() //create instance
const scaleLinear = require('d3-scale').scaleLinear

function calculateColorScale(min, max, threshold) {
    const colorRange = ["#990000", "#eeeeee", "#ffffff", "#eeeeee", "#000099"]
    const mid = (min + max) / 2
    //find the range in which colors can be muted, as a percentage of data range
    const bound = (max - min) * threshold / 2
    return scaleLinear()
            .domain([min, mid - bound, mid, mid + bound, max]) //this means that between mid +- bound, colors are muted
            .range(colorRange)
}

// generate a random matrix of data
// this is where real data would be plugged in
const SIZE = 100 //change this value to run stress tests for maximum number of rows/cols. 
const matrix = []
for (let r = 0; r < SIZE; r++) {
    let row = []
    for (let c = 0; c < SIZE; c++) {
        row.push(Math.random() * 2 - 1)
    }
    matrix.push(row)
}

const svg = d3n.createSVG()
    .append('svg')
        .attr('width', 5000)
        .attr('height', 5000)


//find min and max values in data matrix to scale color accordingly
const threshold = 0.5
let min = 0, max = 0
for (let r = 0; r < matrix.length; r++) {
    let row = matrix[r]
    for (let c = 0; c < row.length; c++) {
        if (row[c] > max) max = row[c]
        if (row[c] < min) min = row[c]
    }
}

const colorScale = calculateColorScale(min, max, threshold)

for (let r = 0; r < matrix.length; r++) {
    let row = matrix[r]

    svg.append('g')
        .selectAll('rect')
        .data(row).enter()
            .append('rect')
                .attr('fill', (d, i) => {
                    return colorScale(d)
                })
                .attr('width', 20)
                .attr('height', 20)
                .attr('x', (d, i) => {
                    return i * (20 + 5)
                })
                .attr('y', () => {
                    return r * (20 + 5)
                })
}       

fs.writeFileSync('test.svg', d3n.svgString(), 'utf8')
