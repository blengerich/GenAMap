//
// Created by haohanwang on 2/20/16.
//

#include "gtest/gtest.h"
#include <queue>

#include "Model.hpp"
#include "LinearRegression.hpp"
#include "TreeLasso.hpp"
#include "MultiPopLasso.hpp"
#include "AdaMultiLasso.hpp"
#include "LinearMixedModel.hpp"
#include "lmm.hpp"
#include "../IO/FileIO.hpp"

void TEST_VECTOR_NEAR(VectorXf a, VectorXf b, float v) {
    long l = a.size();
    ASSERT_EQ(l, b.size());
    for (long i=0;i<l;i++){
        EXPECT_NEAR(a(i), b(i), v);
    }
}

void TEST_VECTOR_DOUBLE_EQ(VectorXf a, VectorXf b) {
    long l = a.size();
    ASSERT_EQ(l, b.size());
    for (long i=0;i<l;i++){
        EXPECT_DOUBLE_EQ(a(i), b(i));
    }
}

void TEST_MATRIX_NEAR(MatrixXf m, MatrixXf n, float v) {
    long r = m.rows();
    long c = m.cols();
    ASSERT_EQ(r, n.rows());
    ASSERT_EQ(c, n.cols());
    for (long i=0;i<r;i++){
        TEST_VECTOR_NEAR(m.row(i), n.row(i), v);
    }
}

void TEST_MATRIX_DOUBLE_EQ(MatrixXf m, MatrixXf n) {
    long r = m.rows();
    long c = m.cols();
    ASSERT_EQ(r, n.rows());
    ASSERT_EQ(c, n.cols());
    for (long i=0;i<r;i++){
        TEST_VECTOR_DOUBLE_EQ(m.row(i), n.row(i));
    }
}

void TEST_TREE_NEAR(Tree * m, Tree * n, float v){
    queue<treeNode*> nm;
    queue<treeNode*> nn;
    treeNode * root1 = m->getRoot();
    treeNode * root2 = n->getRoot();
    nm.push(root1);
    nn.push(root2);
    while (nm.size()>0 && nn.size()>0){
        treeNode* mt = nm.front();
        treeNode* nt = nn.front();

        vector<long> ms = mt->trait;
        vector<long> ns = nt->trait;

        ASSERT_DOUBLE_EQ(ms.size(), ns.size());

        for (unsigned long i=0;i<ns.size();i++){
            EXPECT_DOUBLE_EQ(ms.at(i), ns.at(i));
        }

        if (mt->children.size()==0){
        }
        else{
            for (unsigned int i=0; i<mt->children.size();i++){
                nm.push(mt->children[i]);
            }
        }
        if (nt->children.size()==0){
        }
        else{
            for (unsigned int i=0; i < nt->children.size();i++){
                nn.push(nt->children[i]);
            }
        }
        nm.pop();
        nn.pop();
    }

    EXPECT_DOUBLE_EQ(nm.size(), 0);
    EXPECT_DOUBLE_EQ(nn.size(), 0);
}


TEST(MODEL_BASE, CostFunction){
    MatrixXf X(10, 5);
    X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
    0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
    0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
    0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
    0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
    0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
    0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
    0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
    0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
    0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
    MatrixXf y(10, 1);
    y << 0.4173,
    0.0497,
    0.9027,
    0.9448,
    0.4909,
    0.4893,
    0.3377,
    0.9001,
    0.3692,
    0.1112;
    Model m = Model();
    m.setX(X);
    m.setY(y);
    MatrixXf beta(5, 1);
    beta << -0.2106,
    0.0919,
    0.7380,
    -0.3055,
    0.4659;
    m.updateBeta(beta);
    float r = m.cost();
    EXPECT_NEAR(r, 0.0152, 1e-3);
}

TEST(MODEL_BASE, Prediction){
    MatrixXf X(10, 5);
    X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
    0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
    0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
    0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
    0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
    0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
    0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
    0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
    0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
    0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
    Model m = Model();
    m.setX(X);
    MatrixXf beta(5, 1);
    beta << -0.2106,
    0.0919,
    0.7380,
    -0.3055,
    0.4659;
    m.updateBeta(beta);
    MatrixXf y(10, 1);
    y << 0.3156,
    0.0929,
    0.9600,
    0.8980,
    0.4987,
    0.5284,
    0.5239,
    0.4627,
    0.3952,
    0.3525;
    MatrixXf p = m.predict();
    TEST_MATRIX_NEAR(p, y, 1e-3);
    p = m.predict(X);
    TEST_MATRIX_NEAR(p, y, 1e-3);
}

TEST(LINEAR_REGRESSION, CostFunction){
    MatrixXf X(10, 5);
    X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
    0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
    0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
    0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
    0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
    0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
    0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
    0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
    0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
    0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
    MatrixXf y(10, 1);
    y << 0.4173,
    0.0497,
    0.9027,
    0.9448,
    0.4909,
    0.4893,
    0.3377,
    0.9001,
    0.3692,
    0.1112;
    LinearRegression lr = LinearRegression();
    lr.setX(X);
    lr.setY(y);
    MatrixXf beta(5, 1);
    beta << -0.2106,
    0.0919,
    0.7380,
    -0.3055,
    0.4659;
    lr.updateBeta(beta);
    float r = lr.cost();
    EXPECT_NEAR(r, 0.0152, 1e-3);
    float l1 = 0.1;
    lr.setL1_reg(l1);
    r = lr.cost();
    EXPECT_NEAR(r, 0.0152+0.18119, 1e-3);
    float l2 = 0.2;
    lr.setL1_reg(0);
    lr.setL2_reg(l2);
    r = lr.cost();
    EXPECT_NEAR(r, 0.0152+0.1816, 1e-3);
    lr.setL1_reg(l1);
    r = lr.cost();
    EXPECT_NEAR(r, 0.0152+0.18119+0.1816, 1e-3);
}

TEST(LINEAR_REGRESSION, ProximalDerivative){
    MatrixXf X(4, 3);
    X << 0.7803,    0.0965,    0.5752,
    0.3897,    0.1320,    0.0598,
    0.2417,    0.9421,    0.2348,
    0.4039,    0.9561,    0.3532;
    MatrixXf y(4, 1);
    y << 0.8212,
    0.0154,
    0.0430,
    0.1690;
    MatrixXf beta(3,1);
    beta << 0.6491,
    0.7317,
    0.6477;
    MatrixXf pd(3, 1);
    pd << 0.8890,
    1.9383,
    0.6812;
    LinearRegression lr = LinearRegression();
    lr.setX(X);
    lr.setY(y);
    lr.updateBeta(beta);
    MatrixXf r = lr.proximal_derivative();
    TEST_MATRIX_NEAR(r, pd, 1e-3);
}

TEST(LINEAR_REGRESSION, ProximalOperator){
    MatrixXf beta(3,1);
    beta << -0.7491,
    0.7317,
    0.6477;
    MatrixXf pd(3, 1);
    pd << -0.0491,
    0.0317,
    0.0;
    LinearRegression lr = LinearRegression();
    lr.updateBeta(beta);
    MatrixXf a = lr.proximal_operator(beta, 1);
    TEST_MATRIX_NEAR(a, beta, 1e-3);
    lr.setL1_reg(7);
    a = lr.proximal_operator(beta, 0.1);
    TEST_MATRIX_NEAR(a, pd, 0.1);
}

TEST(TREE_LASSO, CostFunction){
    MatrixXf X(4, 6);
    X << 0.4509,    0.1890,    0.6256,    0.7757,    0.3063,    0.7948,
    0.5470,    0.6868,    0.7802,    0.4868,    0.5085,    0.6443,
    0.2963,    0.1835,    0.0811,    0.4359,    0.5108,    0.3786,
    0.7447,    0.3685,    0.9294,    0.4468,    0.8176,    0.8116;
    MatrixXf y(4, 5);
    y << -1.3302,   -0.8198,    0.9233,    0.8666,    2.3260,
    -1.0999,   -0.8959,    2.2639,    2.0579,   -0.2151,
    -0.0032,    0.3647,    0.7551,    0.7000,   -0.6198,
    -0.9786,   -0.8553,    1.6659,    1.5554,    0.9160;

    // clustering relationship of y is (((2,3),4),(0,1))

    MatrixXf beta(6, 5);
    beta << 0,         0,    1.0000,    1.0000,         0,
    0,         0,    2.5000,    2.2000,   -4.0000,
    -1.5000,   -1.8000,         0,         0,    3.0000,
    -0.9000,         0,         0,         0,    1.5000,
    1.0000,     1.0000,         0,         0,   -2.2000,
    0,         0,         0,         0,    0.9000;
    TreeLasso tl = TreeLasso();
    tl.setXY(X, y);
    tl.updateBeta(beta);

    Tree* tr = new Tree();
    treeNode* nd1 = tr->buildLeafNode(2);
    treeNode* nd2 = tr->buildLeafNode(3);
    vector<treeNode*> ch1;
    ch1.push_back(nd1);
    ch1.push_back(nd2);
    treeNode* mid1 = tr->buildParentFromChildren(ch1);
    treeNode* nd3 = tr->buildLeafNode(4);
    vector<treeNode*> ch4;
    ch4.push_back(nd3);
    ch4.push_back(mid1);
    treeNode* mid4 = tr->buildParentFromChildren(ch4);

    treeNode* nd4 = tr->buildLeafNode(0);
    treeNode* nd5 = tr->buildLeafNode(1);
    vector<treeNode*> ch3;
    ch3.push_back(nd4);
    ch3.push_back(nd5);
    treeNode* mid3 = tr->buildParentFromChildren(ch3);
    vector<treeNode*> ch6;
    ch6.push_back(mid3);
    ch6.push_back(mid4);
    treeNode * root = tr->buildParentFromChildren(ch6);
    tr->setRoot(root);

    tl.setTree(tr);

    float r = tl.cost();
    EXPECT_NEAR(r, 6.4982, 1e-3);

    TreeLasso tl2 = TreeLasso();
    tl2.setXY(X, y);
    tl2.updateBeta(beta);
    tl2.setMu(0.01);
    tl2.setLambda(10);
    tl2.setThreshold(0.5);
    tl2.hierarchicalClustering();
    tl2.initGradientUpdate();
    r = tl2.cost();
    EXPECT_NEAR(r, 1.77914, 1e-3);
}

TEST(TREE_LASSO, HierarchicalClustering){
    MatrixXf X(4, 6);
    X << 0.4509,    0.1890,    0.6256,    0.7757,    0.3063,    0.7948,
    0.5470,    0.6868,    0.7802,    0.4868,    0.5085,    0.6443,
    0.2963,    0.1835,    0.0811,    0.4359,    0.5108,    0.3786,
    0.7447,    0.3685,    0.9294,    0.4468,    0.8176,    0.8116;
    MatrixXf y(4, 5);
    y << -1.3302,   -0.8198,    0.9233,    0.8666,    2.3260,
    -1.0999,   -0.8959,    2.2639,    2.0579,   -0.2151,
    -0.0032,    0.3647,    0.7551,    0.7000,   -0.6198,
    -0.9786,   -0.8553,    1.6659,    1.5554,    0.9160;

    // clustering relationship of y is (((2,3),4),(0,1))

    MatrixXf beta(6, 5);
    beta << 0,         0,    1.0000,    1.0000,         0,
    0,         0,    2.5000,    2.2000,   -4.0000,
    -1.5000,   -1.8000,         0,         0,    3.0000,
    -0.9000,         0,         0,         0,    1.5000,
    1.0000,     1.0000,         0,         0,   -2.2000,
    0,         0,         0,         0,    0.9000;
    TreeLasso tl = TreeLasso();
    tl.setXY(X, y);
    tl.updateBeta(beta);
    tl.hierarchicalClustering();

    Tree * rtr = tl.getTree();

    Tree* tr = new Tree();
    treeNode* nd1 = tr->buildLeafNode(2);
    treeNode* nd2 = tr->buildLeafNode(3);
    vector<treeNode*> ch1;
    ch1.push_back(nd1);
    ch1.push_back(nd2);
    treeNode* mid1 = tr->buildParentFromChildren(ch1);
    treeNode* nd3 = tr->buildLeafNode(4);
    vector<treeNode*> ch4;
    ch4.push_back(nd3);
    ch4.push_back(mid1);
    treeNode* mid4 = tr->buildParentFromChildren(ch4);

    treeNode* nd4 = tr->buildLeafNode(0);
    treeNode* nd5 = tr->buildLeafNode(1);
    vector<treeNode*> ch3;
    ch3.push_back(nd4);
    ch3.push_back(nd5);
    treeNode* mid3 = tr->buildParentFromChildren(ch3);
    vector<treeNode*> ch6;
    ch6.push_back(mid3);
    ch6.push_back(mid4);
    treeNode * root = tr->buildParentFromChildren(ch6);
    tr->setRoot(root);

    TEST_TREE_NEAR(tr, rtr, 1e-3);
}

TEST(TREE_LASSO, ProximalDerivative){
    Tree* tr = new Tree();
    treeNode* nd1 = tr->buildLeafNode(2);
    treeNode* nd2 = tr->buildLeafNode(3);
    vector<treeNode*> ch1;
    ch1.push_back(nd1);
    ch1.push_back(nd2);
    treeNode* mid1 = tr->buildParentFromChildren(ch1);
    treeNode* nd3 = tr->buildLeafNode(4);
    vector<treeNode*> ch4;
    ch4.push_back(nd3);
    ch4.push_back(mid1);
    treeNode* mid4 = tr->buildParentFromChildren(ch4);

    treeNode* nd4 = tr->buildLeafNode(0);
    treeNode* nd5 = tr->buildLeafNode(1);
    vector<treeNode*> ch3;
    ch3.push_back(nd4);
    ch3.push_back(nd5);
    treeNode* mid3 = tr->buildParentFromChildren(ch3);
    vector<treeNode*> ch6;
    ch6.push_back(mid3);
    ch6.push_back(mid4);
    treeNode * root = tr->buildParentFromChildren(ch6);
    tr->setRoot(root);

    MatrixXf X(4, 6);
    X << 0.4509,    0.1890,    0.6256,    0.7757,    0.3063,    0.7948,
    0.5470,    0.6868,    0.7802,    0.4868,    0.5085,    0.6443,
    0.2963,    0.1835,    0.0811,    0.4359,    0.5108,    0.3786,
    0.7447,    0.3685,    0.9294,    0.4468,    0.8176,    0.8116;
    MatrixXf y(4, 5);
    y << -1.3302,   -0.8198,    0.9233,    0.8666,    2.3260,
    -1.0999,   -0.8959,    2.2639,    2.0579,   -0.2151,
    -0.0032,    0.3647,    0.7551,    0.7000,   -0.6198,
    -0.9786,   -0.8553,    1.6659,    1.5554,    0.9160;

    // clustering relationship of y is (((2,3),4),(0,1))

    MatrixXf beta(6, 5);
    beta << 0,         0,    1.0000,    1.0000,         0,
    0,         0,    2.5000,    2.2000,   -4.0000,
    -1.5000,   -1.8000,         0,         0,    3.0000,
    -0.9000,         0,         0,         0,    1.5000,
    1.0000,     1.0000,         0,         0,   -2.2000,
    0,         0,         0,         0,    0.9000;
    TreeLasso tl = TreeLasso();
    tl.setXY(X, y);
    tl.updateBeta(beta);
    tl.setMu(0.01);
    tl.setLambda(10);
    tl.setThreshold(1);
    tl.setTree(tr);
    tl.initGradientUpdate();

    MatrixXf grad(6,5);
    grad << -0.0000,    0.0001,    0.4421,    0.4420,   -0.0001,
    -0.0000,    0.0000,    0.4017,    0.3535,   -0.1922,
    -0.1601,   -0.1920,    0.0002,    0.0001,    0.2499,
    -0.2500,    0.0001,    0.0001,    0.0001,    0.2498,
    0.1768,    0.1768,    0.0001,   0.0001,   -0.2501,
    -0.0000,    0.0001,    0.0002,    0.0001,    0.2498;

    MatrixXf r = tl.proximal_derivative();
    TEST_MATRIX_NEAR(r, grad, 1e-3);
}

TEST(MULTI_POP_LASSO, CostFunction){
    MatrixXf X (10, 2);
    X << 0.8530,    0.4173,
    0.6221,    0.0497,
    0.3510,    0.9027,
    0.5132,    0.9448,
    0.4018,    0.4909,
    0.0760,    0.4893,
    0.2399,    0.3377,
    0.1233,    0.9001,
    0.1839,    0.3692,
    0.2400,    0.1112;
    MatrixXf y(10, 1);
    y << 2.0367,
    1.1691,
    -0.7523,
    -0.8764,
    1.3248,
    0.7427,
    -0.3477,
    1.3371,
    0.7859,
    0.5653;
    MatrixXf beta(2, 2);
    beta << 1.7803,    1.2417,
    -0.6103,   -0.5961;
    VectorXf Z(10);
    Z << 0,     0,     1,     1,     0,     0,     1,     0,     0,     0;
    MatrixXf fedInBeta(4, 1);
    fedInBeta << 1.7803, -0.6103, 1.2417, -0.5961;
    MultiPopLasso mpl = MultiPopLasso();
    mpl.setXY(X, y);
    mpl.setPopulation(Z);
    mpl.setMu(0.1);
    mpl.setLambda(0);
    mpl.initTraining();
    mpl.updateBeta(fedInBeta);
    float r = mpl.cost();
    EXPECT_NEAR(r, 0, 1e-3);
    mpl.setLambda(0.5);
    r = mpl.cost();
    EXPECT_NEAR(r, 2.7195, 1e-3);
}

TEST(MULTI_POP_LASSO, Prediction){
    MatrixXf X (10, 2);
    X << 0.8530,    0.4173,
    0.6221,    0.0497,
    0.3510,    0.9027,
    0.5132,    0.9448,
    0.4018,    0.4909,
    0.0760,    0.4893,
    0.2399,    0.3377,
    0.1233,    0.9001,
    0.1839,    0.3692,
    0.2400,    0.1112;
    MatrixXf y(10, 1);
    y << 2.0367,
    1.1691,
    -0.7523,
    -0.8764,
    1.3248,
    0.7427,
    -0.3477,
    1.3371,
    0.7859,
    0.5653;
    MatrixXf beta(2, 2);
    beta << 1.7803,    1.2417,
    -0.6103,   -0.5961;
    VectorXf Z(10);
    Z << 0,     0,     1,     1,     0,     0,     1,     0,     0,     0;
    MatrixXf fedInBeta(4, 1);
    fedInBeta << 1.7803, -0.6103, 1.2417, -0.5961;
    MultiPopLasso mpl = MultiPopLasso();
    mpl.setXY(X, y);
    mpl.setPopulation(Z);
    mpl.setMu(0.1);
    mpl.setLambda(0);
    mpl.initTraining();
    mpl.updateBeta(fedInBeta);
    MatrixXf r = mpl.predict(X, Z);
    TEST_MATRIX_NEAR(r, y, 1e-3);
}

TEST(MULTI_POP_LASSO, ProximalDerivative){
    MatrixXf X (10, 2);
    X << 0.8530,    0.4173,
    0.6221,    0.0497,
    0.3510,    0.9027,
    0.5132,    0.9448,
    0.4018,    0.4909,
    0.0760,    0.4893,
    0.2399,    0.3377,
    0.1233,    0.9001,
    0.1839,    0.3692,
    0.2400,    0.1112;
    MatrixXf y(10, 1);
    y << 2.0367,
    1.1691,
    -0.7523,
    -0.8764,
    1.3248,
    0.7427,
    -0.3477,
    1.3371,
    0.7859,
    0.5653;
    MatrixXf beta(2, 2);
    beta << 1.7803,    1.2417,
    -0.6103,   -0.5961;
    VectorXf Z(10);
    Z << 0,     0,     1,     1,     0,     0,     1,     0,     0,     0;
    MatrixXf fedInBeta(4, 1);
    fedInBeta << 1.7803, -0.6103, 1.2417, -0.5961;
    MultiPopLasso mpl = MultiPopLasso();
    mpl.setXY(X, y);
    mpl.setPopulation(Z);
    mpl.setMu(0.1);
    mpl.setLambda(0);
    mpl.initTraining();
    mpl.updateBeta(fedInBeta);
    MatrixXf r = mpl.proximal_derivative();

    MatrixXf t(4, 1);
    t <<  0.000184461,
    -9.16484e-06,
    0.000188402,
    -1.9212e-05;
    TEST_MATRIX_NEAR(r, t, 1e-3);
}

TEST(ADA_MULTI_POP_LASSO, Cost_function){
    MatrixXf X(4, 6);
    X << -0.0168,   -0.0169,   -0.0146,    0.0192,   -0.0124,   -0.0092,
    -0.0052,    0.0243,    0.0010,   -0.0105,    0.0167,    0.0155,
    0.0106,   0.0004,   -0.0138,    0.0228,   -0.0112,    0.0017,
    -0.0139,   -0.0212,    0.0112,   -0.0040,   -0.0067,    0.0211;
    MatrixXf y(4, 2);
    y << -0.0302,   -0.0165,
    -0.0349,   -0.0138,
    -0.0061,   -0.0078,
    -0.0403,   -0.0011;

    MatrixXf F(6, 3);
    F << 0.1379,    0.3861,    0.1493,
    0.6021,    0.5081,    0.0918,
    0.1245,    0.7462,    0.0504,
    0.1753,    0.2069,    0.2135,
    0.3099,    0.1689,    0.4061,
    0.1875,    0.4087,    0.2685;

    MatrixXf beta(12, 1);
    beta <<0.5781,
    0.0879,
    0,
    0,
    0,
    0,
    0.4382,
    0,
    0,
    -0.4788,
    -0.0186,
    0.7621;

    float lambda = 0.1;
    float lambda2 = 0.1;

    AdaMultiLasso aml = AdaMultiLasso();
    aml.setXY(X, y);
    aml.setSnpsFeatures(F);
    aml.setLambda1(lambda);
    aml.setLambda2(lambda2);
    aml.initTraining();
    aml.updateBeta(beta);
    float c = aml.cost();
    EXPECT_NEAR(c, 0.421, 1e-3);
    lambda = 0.3;
    aml.setLambda1(lambda);
    c = aml.cost();
    EXPECT_NEAR(c, 0.848974, 1e-3);
    lambda2 = 0.3;
    aml.setLambda2(lambda2);
    c = aml.cost();
    EXPECT_NEAR(c, 1.2617, 1e-3);
}

TEST(ADA_MULTI_POP_LASSO, Projection){
    AdaMultiLasso aml = AdaMultiLasso();
    VectorXf m = VectorXf::Zero(5);
    VectorXf r = VectorXf::Zero(5);
    m << 0.1, 0.5, 0.8, 0.9, 1.1;
    r << 0, 0, 0.2, 0.3, 0.5;
    VectorXf n = aml.projection(m);
    TEST_MATRIX_NEAR(r, n, 1e-3);
    m << 1, 1, 3, 0, 1;
    r << 0, 0, 1, 0, 0;
    n = aml.projection(m);
    TEST_MATRIX_NEAR(r, n, 1e-3);
    m << -0.1, -0.4, 0.9, 1.0, 0.2;
    r << 0, 0, 0.45, 0.55, 0;
    n = aml.projection(m);
    TEST_MATRIX_NEAR(r, n, 1e-3);
}


TEST(LinearMixedModel, Objective){
LinearMixedModel lmm = LinearMixedModel();
MatrixXf X(10, 5);
X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
MatrixXf y(10, 1);
y << 0.4173,
0.0497,
0.9027,
0.9448,
0.4909,
0.4893,
0.3377,
0.9001,
0.3692,
0.1112;
MatrixXf beta(5, 1);
beta << -0.2106,
0.0919,
0.7380,
-0.3055,
0.4659;
lmm.setXY(X, y);
lmm.updateBeta(beta);
float lambda = 0.5;
float r = lmm.f(lambda);
EXPECT_NEAR(r, 3.87016, 0.01);
lambda = 0;
r = lmm.f(lambda);
EXPECT_NEAR(r, 125.332, 0.01); // very sensitive to data format
}


TEST(LinearMixedModel, Beta){
LinearMixedModel lmm = LinearMixedModel();
MatrixXf X(10, 5);
X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
MatrixXf y(10, 1);
y << 0.4173,
0.0497,
0.9027,
0.9448,
0.4909,
0.4893,
0.3377,
0.9001,
0.3692,
0.1112;
MatrixXf beta(5, 1);
beta << -0.2106,
0.0919,
0.7380,
-0.3055,
0.4659;
lmm.setXY(X, y);
//    lmm.updateBeta(beta);
float lambda = 0.0001;
lmm.calculate_beta(lambda);
MatrixXf r = lmm.getBeta();
TEST_MATRIX_NEAR(r, beta, 0.01);
}

TEST(LinearMixedModel, Sigma){
LinearMixedModel lmm = LinearMixedModel();
MatrixXf X(10, 5);
X << 0.8147,    0.1576,    0.6557,    0.7060,    0.4387,
0.9058,    0.9706,    0.0357,    0.0318,    0.3816,
0.1270,    0.9572,    0.8491,    0.2769,    0.7655,
0.9134,    0.4854,    0.9340,    0.0462,    0.7952,
0.6324,    0.8003,    0.6787,    0.0971,    0.1869,
0.0975,    0.1419,    0.7577,    0.8235,    0.4898,
0.2785,    0.4218,    0.7431,    0.6948,    0.4456,
0.5469,    0.9157,    0.3922,    0.3171,    0.6463,
0.9575,    0.7922,    0.6555,    0.9502,    0.7094,
0.9649,    0.9595,    0.1712,    0.0344,    0.7547;
MatrixXf y(10, 1);
y << 0.4173,
0.0497,
0.9027,
0.9448,
0.4909,
0.4893,
0.3377,
0.9001,
0.3692,
0.1112;
MatrixXf beta(5, 1);
beta << -0.2106,
0.0919,
0.7380,
-0.3055,
0.4659;
lmm.setXY(X, y);
//    lmm.updateBeta(beta);
float lambda = 1;
lmm.calculate_sigma(lambda);
float r = lmm.getSigma();
EXPECT_NEAR(r, 0.0304, 0.01);
lmm.calculate_sigma(0.001);
r = lmm.getSigma();
EXPECT_NEAR(r, 30414.9, 50);
lmm.calculate_sigma(1000);
r = lmm.getSigma();
EXPECT_NEAR(r, 0, 0.01);
}

/* Start of lmm Tests */

TEST(LMM, p_values){
FaSTLMM flmm = FaSTLMM();

MatrixXf X = FileIO::getInstance().readMatrixFile("/usr/src/genamap/models/LR_data/markers_values.csv");
MatrixXf y = FileIO::getInstance().readMatrixFile("/usr/src/genamap/models/LR_data/traits_values.csv");
MatrixXf alz_y = y.col(0);
MatrixXf hunt_y = y.col(1);

flmm.setX(X);
flmm.setY(alz_y);
flmm.init();
flmm.train(500, -5, 5);
VectorXf p = flmm.getP();
VectorXf p_true;
p_true.resize(1000);
p_true << 0.1857441704819478, 0.45270563786187434, 0.88266733196441238, 0.75535172007790574, 0.192305181453616, 0.65643336048750878, 0.12860068882318937, 0.54883524658178351, 0.88233122129922004, 0.10157026506667691, 0.084449810029181865, 0.94691953426535269, 0.094105601879179573, 0.25772476759526902, 0.19076366181999146, 0.11616170710752453, 0.95891147367512053, 0.70005977299956479, 0.63327883079828284, 0.86183803196379138, 0.97718273641369779, 0.019623303015512388, 0.3433652416652071, 0.52619173247053463, 0.48831029176097118, 0.34828991808635479, 0.94539336425385012, 0.76835980505375945, 0.25383995018178696, 0.69121454965024176, 0.6111983883867147, 0.85071918775187816, 0.6192939813970233, 0.72144675329026098, 0.61376541143672814, 0.37147361471262752, 0.72790978914676918, 0.41423844095486584, 0.2203083086928446, 0.47483000850956647, 0.60170255295355757, 0.22951522626875495, 0.96158000477127814, 0.016575117706366788, 0.30053331626522528, 0.53342396419265525, 0.28719552189709696, 0.36171097860500301, 0.20418465228543578, 0.37478021537313688, 0.025163063436403756, 0.7410286943207095, 0.82712235444652205, 0.01303907807007733, 0.20128853515478279, 0.63511567038580985, 0.11678048315247705, 0.83094906657945178, 0.98475079806573029, 0.4506509681796188, 0.92058533182951185, 0.56656034625720464, 0.24607097404608003, 0.70936630832857972, 0.37090993930224847, 0.98946455960489232, 0.47328594906214083, 0.56280020587622681, 0.18081852262679154, 0.21999351790460572, 0.051776720805496071, 0.18518088909784794, 0.83477719822973007, 0.55466111996469047, 0.95514825444009532, 0.2765682343689766, 0.77540830925996707, 0.33387108832323364, 0.86515324584535702, 0.26704018563603182, 0.1055600912062338, 0.43182294381306008, 0.096574705993517571, 0.87121579400892668, 0.30178087930290876, 0.13792018006046824, 0.3724353783476595, 0.0013260910168774588, 0.92630206973316609, 0.20446096262980287, 0.35136322688142929, 0.61278470782739869, 0.86699728593623615, 0.0057376023914351071, 0.12753559700147349, 0.097492538483341565, 0.84485934025330933, 0.24025405478087525, 0.7601744795409292, 0.60502476254355364, 0.50067942718294844, 0.70467437058019899, 0.53498653146786901, 0.45400358364170479, 0.021081517260343186, 0.28373269050505312, 0.35043937863731267, 0.15145862656523273, 0.063715735066688262, 0.63308261434048385, 0.59489444572808547, 0.40627118252629146, 0.79430073460369166, 0.89445251462461095, 0.66324219011540753, 0.79825491132251214, 0.7749991867258561, 0.22532871486260989, 0.45805855244698157, 0.38701284122468238, 0.90607811574078945, 0.93469661825271855, 0.66757212590615844, 0.88519486565256456, 0.36935277136701106, 0.30932014057442919, 0.61268810744965041, 0.605439452275497, 0.6734076849213102, 0.4433780500445017, 0.05179306577355141, 0.53170409492556314, 0.34342347143242957, 0.086206736345387544, 0.86777718047997365, 0.82518020306855921, 0.57529574767933611, 0.026256164925651276, 0.033187323583287215, 0.57011548940630818, 0.27256300666036715, 0.91172934454692378, 0.84028693326013437, 0.25993042790425785, 0.99637310138770441, 0.37055184034634048, 0.62337361647933487, 0.075213813178600999, 0.82969679027196741, 0.25978219534524882, 0.37073090423292721, 0.17060071151640485, 0.27987512197374892, 0.13871587600124013, 0.39342763444969331, 0.25255030582039506, 0.43266799268151879, 0.8942455862625015, 0.99517306496487334, 0.32120976066973111, 0.099854756450576357, 0.14859549362863458, 0.1651203714064983, 0.4913517288057182, 0.47435129957283495, 0.47056018340099603, 0.62232144757885455, 0.74126346251226927, 0.98337909460996054, 0.3172474618471614, 0.94122893093195814, 0.84128480614585244, 0.27708003872981946, 0.98181895941679276, 0.61989662637299148, 0.95995187310909724, 0.94725034288797072, 0.94203941713184869, 0.27409840793816964, 0.38382325840718912, 0.03420231045036308, 0.76198310252534762, 0.32350779868887447, 0.41373638608473029, 0.94064995203285162, 0.94943431719066385, 0.39762240817060124, 0.68012453634704706, 0.31960308787199238, 0.48927300171612265, 0.17430003142187336, 0.51491998545597162, 0.63674346915212454, 0.78498508519159294, 0.25842058960553221, 0.51663862663493787, 0.56074559195230944, 0.78746804698284145, 0.54541460908808626, 0.73478348135200311, 0.22385291959237558, 0.33902391211128247, 0.49175134413589783, 0.034012520808106447, 0.055311234224198542, 0.13192398923298612, 0.17550576297469389, 0.87718665500577364, 0.6023732856391939, 0.79423476646586899, 0.63381253947611138, 0.78868156207302187, 0.76956213443264165, 0.70970413342772498, 0.90819096969031532, 0.26305772902739283, 0.063503788840237732, 0.87588516014927054, 0.81975883702625729, 0.053500858189839233, 0.49588977177292404, 0.87551711631519646, 0.35645114143924761, 0.76215636254133834, 0.70650237317754738, 0.19227913681468867, 0.51663370183725654, 0.50009462094752566, 0.043805978781646479, 0.27283107556213704, 0.2302213545367946, 0.66394494433436768, 0.063626501311170577, 0.35537145341733933, 0.35756698485487803, 0.99613154133925907, 0.87962575778200258, 0.81479405376910885, 0.49598094433962536, 0.49995111371780931, 0.68811963472995274, 0.84220178597013695, 0.80061100812903274, 0.1470878011398308, 0.097437101820086025, 0.92711759017234363, 0.58933554815646172, 0.31043848279903569, 0.57688711589867769, 0.59645034217598059, 0.38529194056082472, 0.34298378596569812, 0.050606377042521529, 0.10393763816498661, 0.68972813779850228, 0.70274982497640592, 0.2837805064669186, 0.1592541138990512, 0.23858445188522001, 0.79391633724104094, 0.033747876577623521, 0.86970855179013373, 0.59438409035818929, 0.16268404277672321, 0.55722436639862416, 0.14892651384450961, 0.53441923476495434, 0.88935956830084761, 0.65967467489841225, 0.3543829911087587, 0.49769495123273821, 0.36567320358836741, 0.78870175152287314, 0.8289325938970844, 0.50711682692621807, 0.60064617437505352, 0.17790684115842101, 0.93657435959076452, 0.97456528814552978, 0.89934268371805715, 0.36927094748763156, 0.56912952027744801, 0.9537839141976141, 0.3399158267601563, 0.9479889483386692, 0.45110934230124222, 0.17229768712545046, 0.94864230476265732, 0.62853740319962093, 0.017643792096561712, 0.87773804680140399, 0.036761537108384493, 0.7611407513115761, 0.56406657726690068, 0.31470920304273092, 0.59680806438599454, 0.043440893701344782, 0.8030978571413081, 0.82286725916947612, 0.9054317481489329, 0.090532927753257927, 0.7317812919249056, 0.98794549739766868, 0.76477861267964609, 0.14358782896908787, 0.72415530068419942, 0.81670735355514046, 0.87477382355738054, 0.87131047613609802, 0.25756214183684478, 0.93104556513880099, 0.43388187108247034, 0.77950400323127766, 0.29018251332467404, 0.30317103432608228, 0.64293773595703962, 0.00031003265059561906, 0.93520336440184804, 0.25917264041847826, 0.9749938655310133, 0.083495685279562984, 0.85269178722746108, 0.5612524983570174, 0.58791845714246116, 0.4305427221652014, 0.11912853390084417, 0.45602730660533319, 0.34941985932104236, 0.82697847962664472, 0.64576174716167567, 0.87889560875832973, 0.25522528275380585, 0.18915535038039175, 0.557907918715426, 0.66107390964422486, 0.140962963131364, 0.47762685522548887, 0.66712984171021683, 0.60751798537356039, 0.10877171849821757, 0.037122259135951331, 0.055354659627754134, 0.062177652608881813, 0.33146766107461156, 0.97848681001743743, 0.52792100285979737, 0.66835812402605677, 0.58879498464082136, 0.84863651104797411, 0.5646792959912359, 0.68319106745407532, 0.49217096791759285, 0.10442924824173067, 0.50243768430520652, 0.062833143327420571, 0.72682055547380897, 0.74275312294280194, 0.73029168406165745, 0.15727056558495267, 0.35472817129274792, 0.51526540568487689, 0.090169840755326303, 0.34253553500644329, 0.92879890194293424, 0.32816934285245913, 0.87275211986310886, 0.73242850989295183, 0.0056351325578143643, 0.59031055644348851, 0.61064728244017774, 0.18437577838652022, 0.75602310759513536, 0.41742953071859479, 0.030202448771407726, 0.37757896594734408, 0.1368816058578374, 0.57097962402016811, 0.48222769751832506, 0.62327026660536466, 0.68426531947468361, 0.13175172509656338, 0.77221514281817627, 0.81376385122241057, 0.011116215400763779, 0.87185767768475153, 0.12343160910872703, 0.29439852263440475, 0.6374971224768089, 0.6560113715014021, 0.32124605912913523, 0.59195073946520393, 0.23556491665516102, 0.20598167802737638, 0.50312823250138461, 0.64673320998874395, 0.22067504487469344, 0.68695013429350971, 0.27362089051736904, 0.30440000468798972, 0.42876314954255268, 0.69559811831799556, 0.67933729760599348, 0.32599610082750796, 0.90846836427683064, 0.32464230387364024, 0.214953029523165, 0.53468850692941372, 0.79036590588417466, 0.89051577403165316, 0.41328240033724328, 0.90501384230867821, 0.11126645051214989, 0.62969368111811042, 0.40562419898620972, 0.033917927569442105, 0.92940431007974378, 0.60316719334217406, 0.71250558777121531, 0.79312953688040611, 0.58622663539405795, 0.10412941551343455, 0.92788052177632663, 0.74726734364892411, 0.26405558033992504, 0.22575758461387371, 0.73252645272980876, 0.13456733699540002, 0.49498913444849035, 0.60929709547868915, 0.81772617543423742, 0.61118073971329545, 0.55582943034939758, 0.70917441493120315, 0.86711559635030089, 0.12160148525615565, 0.65416160655210898, 0.27799642266746005, 0.65607978366115072, 0.81956555382736407, 0.36151724906937832, 0.68731855022806831, 0.21694767737611106, 0.61592740068559704, 0.32976445497641937, 0.78125002041956249, 0.76804139537575566, 0.41337492941475718, 0.552400360097832, 0.64192345961733377, 0.81969907695944422, 0.70871544060626412, 0.7348999655856332, 0.15260825083625609, 0.10366508512745418, 0.93552581434895443, 0.37526207010563106, 0.12144095229148004, 0.6655207808373288, 0.80655650150721381, 0.53562831153406387, 0.011236371906177385, 0.82422685143650454, 0.4325495995243438, 0.89387225398489223, 0.890231242333543, 0.96066241890620963, 0.8693634333875172, 0.35834415788840168, 0.76902372899984506, 0.043364041789277122, 0.81734263267102547, 0.89142799078332424, 0.010527093966491392, 0.31160541832579225, 0.60530955112161755, 0.27072303502451317, 0.43644664146612544, 0.22738131101698, 0.092631829750742814, 0.033366174053909771, 0.19891475324945943, 0.38690969584231749, 0.1556880419584791, 0.75082001905172691, 0.34935597073254276, 0.98411417913130261, 0.1950988960183615, 0.96639420718308222, 0.85186857356542056, 0.026940626302109194, 0.99412534191018898, 0.0341536285947956, 0.58534397321577536, 0.18413210811127459, 0.73950213004842991, 0.35591845345661854, 0.43033045782686374, 0.77838565332512744, 0.31112166667459956, 0.60479735866003104, 0.31800892893856297, 0.29911889741017705, 0.22188921987285529, 0.09506655098320918, 0.043952676161407966, 0.8458739527275807, 0.38358145785348308, 0.38517640984268386, 0.59294697778815075, 0.22025891403307699, 0.2193642233825264, 0.67812064035871644, 0.65030355470412182, 0.78433549566909311, 0.54092604573905367, 0.31477994475089144, 0.8312904195255747, 0.18100294297895841, 0.40685379554609669, 0.91371386137332233, 0.57185676343236769, 0.7935959284643761, 0.40416999760765293, 0.32446996606871015, 0.64754293799942308, 0.011580201186191543, 0.90473193055308632, 0.066628575958916927, 0.12722534108948841, 0.13899161895053225, 0.76859620328439582, 0.69148156100571023, 0.52713619955132374, 0.79153357790880707, 0.74753201264062186, 0.59152020350643308, 0.32209257615410503, 0.92881090181435777, 0.45031842866569582, 0.50919318582915329, 0.90032094571913779, 0.38003916320997921, 0.45608593411641585, 0.12087820427243545, 0.32041758853412644, 0.11791916536433025, 0.68470649268935035, 0.43713131179807097, 0.96729768256595283, 0.052038596228907774, 0.88524893567633967, 0.30872630537062079, 0.97196577261593853, 0.41720939449292815, 0.66041632268152117, 0.084575177770608218, 0.95766854737701868, 0.43659198460435933, 0.32676906128791994, 0.24530739100134269, 0.11937197506081021, 0.31779047301630947, 0.31131975340252671, 0.52409970543323858, 0.18244225892131502, 0.66156775157436687, 0.38242151971359439, 0.24948849263758832, 0.14708180825277917, 0.37963332454036636, 0.17474415112242808, 0.42099532897057235, 0.59660668813512907, 0.29443101727181503, 0.97421136739306813, 0.57584349150455572, 0.15609998495927027, 0.6052021793976774, 0.90285169910841645, 0.24814282963217046, 0.75177109731185454, 0.55299794660195778, 0.93663340512668736, 0.53013364057521595, 0.57869559454853059, 0.48300128825437127, 0.076501290651332848, 0.7454461638889901, 0.39718745144587264, 0.19150045793306028, 0.82852049700597852, 0.46013715307916625, 0.56022086306378438, 0.91002603571587048, 0.10576977127158405, 0.068659553063360176, 0.51857430212589939, 0.11001725923279269, 0.7208264021865689, 0.60421572820981306, 0.89751921063122064, 0.84078581097294824, 0.59710204653238141, 0.44840704011956489, 0.59519902842674632, 0.0052915988205568818, 0.96153551548666905, 0.85183736913846952, 0.0054461947387200995, 0.026376242028045796, 0.99685930467065487, 0.095200922178382094, 0.53861658127107026, 0.92271828204413331, 0.45746844965926903, 0.1796616278577306, 0.0030185187645172459, 0.48305014699939253, 0.54271229733739568, 0.31996903702379886, 0.42270292708473056, 0.33878874087239452, 0.94497243961749078, 0.2115062326368444, 0.67760074437203488, 0.5626796092127343, 0.76996644685594007, 0.57299417649057349, 0.70185048980208897, 0.58573314368280816, 0.90657995248816559, 0.69838916876480872, 0.92026583360063108, 0.48918180167354774, 0.23883090026986853, 0.54901480137390912, 0.53728685953194244, 0.31029700775477898, 0.99121679810018704, 0.32709171616854449, 0.89443441131596202, 0.2240950853175446, 0.49853881743728112, 0.95863272107439412, 0.97926308455283317, 0.21566516220131057, 0.0067475251841125263, 0.1952366649852719, 0.82948369096371211, 0.046391551443433092, 0.55836328517743339, 0.5359195868191291, 0.37778809515073963, 0.471710703032307, 0.85587264992319712, 0.083834672901843738, 0.79281408232359363, 0.4117266932728243, 0.86042373634211211, 0.17196697818758519, 0.58572300348533402, 0.56611771362312169, 0.91260923753187084, 0.948928482249213, 0.58644523385409575, 0.46098303967083087, 0.14780546902723618, 0.55892052934112613, 0.32300384209436761, 0.97191383456494829, 0.67745064388040888, 0.91092493610863268, 0.37181856218708154, 0.14816179654395342, 0.73420980312682493, 0.0073849850868103794, 0.17797996774026278, 0.71116287022204783, 0.77314050000720003, 0.69134494962712933, 0.13192398923298612, 0.63041960962519195, 0.10020195760484604, 0.1279958273665476, 0.087673428371848369, 0.088953001036114712, 0.68091792299766418, 0.31927883108345168, 0.26171238549417636, 0.1568439586199995, 0.95025600774927199, 0.45317067875347061, 0.95063423983815332, 0.24826511025398007, 0.62700800353608055, 0.43375795687808572, 0.28446176929305117, 0.80044490882050312, 0.20271297093946852, 0.17473925943916771, 0.45672041248576611, 0.44159040288109774, 0.53110003951421436, 0.085709118117646074, 0.27743478960150136, 0.77747340523941821, 0.54809597808774202, 0.48525318749207691, 0.087096101063983924, 0.93311426465444647, 0.54611015868411972, 0.77222342397891297, 0.95303709928118052, 0.24548689860203332, 0.31435364908668478, 0.022868524391136416, 0.38865676800106774, 0.26087820240014781, 0.21476278527069917, 0.98192315070712977, 0.90230421551443407, 0.76238940814814549, 0.24540660421644539, 0.38735218335507648, 0.69601810437046785, 0.38695631758356808, 0.56404868164355981, 0.69868073241166084, 0.1527128848930451, 0.63697201568574113, 0.28297349331987554, 0.7499873132893089, 0.85333014026256993, 0.36058289745404992, 0.23096047072880174, 0.62845026239751567, 0.071241291452095484, 0.2598260149938641, 0.10461637642345685, 0.33827596980983154, 0.85064071756535242, 0.26891123722484195, 0.74316072282871115, 0.84237049366120498, 0.43167049671307611, 0.066870958953999735, 0.83161854564030868, 0.21030922827683568, 0.76653429603431433, 0.79873649993181139, 0.8092708134886033, 0.22318000516558276, 0.52268830352066242, 0.94745316895369858, 0.22515970285255177, 0.57361104073179181, 0.73668677904229729, 0.18154864388603154, 0.093964000726409036, 0.61009903799993981, 0.58185927643889612, 0.59459565255859315, 0.52841473065183142, 0.92466951094435634, 0.66573036630265314, 0.7732091655670047, 0.091839122338183143, 0.98097048698821965, 0.89350374240860186, 0.99291444170403675, 0.66942980362196114, 0.8449913560124549, 0.72918885594627991, 0.25200525764670012, 0.57616762297800039, 0.36164756225157724, 0.96444184930386001, 0.91610559090013499, 0.94598469682514708, 0.30678323352885317, 0.81699945019674969, 0.19228869237834983, 0.52826705368005389, 0.051606237323924602, 0.12487344137770406, 0.014881208843849209, 0.82832247919832958, 0.82890623601780733, 0.9681069680169605, 0.33816179932657653, 0.85908313775203271, 0.71931541630464846, 0.12978544326102087, 0.31195318397406174, 0.89320731902064654, 0.94859741398614261, 0.33768840084392182, 0.98573340044426183, 0.69988366851485551, 0.29435586513797712, 0.78573348487336148, 0.43209958959919692, 0.96481938642492371, 0.72212983484557447, 0.43027449018251285, 0.7878478425884855, 0.97674547042142468, 0.10522987644762803, 0.88803540662658942, 0.32876939190816534, 0.38183824701808355, 0.59829865076665423, 0.33362885655358543, 0.2570562088814195, 0.17170381304945592, 0.53221471359819827, 0.45522211581863581, 0.74448571431489863, 0.18112612857366681, 0.97425293468581242, 0.25973064192394407, 0.41845961559139722, 0.70593134784797107, 0.47360102968170181, 0.95249625751613032, 0.59761242059208008, 0.55668456973206148, 0.94704660256045137, 0.7220168923004453, 0.53354535217106258, 0.055532787099801834, 0.60314596131392384, 0.24652020417083753, 0.94331225907301319, 0.62758289473361839, 0.34903070019472926, 0.92163027094500816, 0.26312284878929559, 0.47032006687691741, 0.4227244947057196, 0.48214348099215665, 0.22229370599729611, 0.17173038887546671, 0.58543901808706944, 0.22634079060331638, 0.59734268250936418, 0.51529827480407975, 0.65629570042929342, 0.68823509197177601, 0.92331728372373623, 0.046421802086269823, 0.23407169728584173, 0.16856922145323891, 0.26666303549979253, 0.84072413815720926, 0.71561867111580613, 0.30247560551245634, 0.46610819609251808, 0.14476656103171195, 0.80081308304291676, 0.24255757544520579, 0.82170040837558744, 0.18012439168060015, 0.1377028128618939, 0.078474970128814478, 0.18804167119554996, 0.074460565399501105, 0.021083864886397647, 0.65950892003667616, 0.30277294281146644, 0.42772997093591025, 0.76124632628141975, 0.29608148334670004, 0.33395611783144474, 0.50311803116204823, 0.41604252259669894, 0.54264844117344269, 0.91552111551110027, 0.55766728161739776, 0.22491180359275298, 0.073980334924427099, 0.19337194871015476, 0.61645442241758508, 0.4110134997457493, 0.24154677379520334, 0.27091045370655636, 0.36240057143041537, 0.96999383647793513, 0.45754568693516628, 0.36979150694744467, 0.035613313648118074, 0.33387821759534742, 0.39539608599037934, 0.53036720938745385, 0.6714645334185676, 0.12649218928225053, 0.98802429194954899, 0.071921246028989444, 0.69151055838290254, 0.81797977958623169, 0.62789337859149241, 0.17926846231094495, 0.39684952716087185, 0.77883510945706458, 0.34998891814413513, 0.96943941447984017, 0.67193662910593166, 0.62487359840449452, 0.26179190978844952, 0.13221857556061484, 0.55732558685589018, 0.026926233549393205, 0.34839063125696557, 0.53084386673680806, 0.10340840086476293, 0.18108125202261305, 0.92083956424858626, 0.27722739061886204, 0.3551190129086419, 0.78157056243852896, 0.06160904417740716, 0.65149024786052456, 0.6471931863812983, 0.010380802309830002, 0.79023106265365806, 0.37204611578934466, 0.19111779331136949, 0.99514224184190803, 0.92017156704186287, 0.10126159541830615, 0.85471051238499329, 0.38233565728615604, 0.50652681292974022, 0.97601796505225902, 0.016103625774611042, 0.69865271623267244, 0.41884957188975713, 0.64554750433784669, 0.99675729998852236, 0.86249034323281804, 0.1739881994773175, 0.47887217058651554, 0.84080560172610563, 0.42825641866190356, 0.40566170814351676, 0.14203860217891298, 0.5910229718145239, 0.89596713991067189, 0.46794538943350805, 0.26683849304787732, 0.1721108093784674, 0.3384532797008174, 0.39212040065123943, 0.46209116037691911, 0.59878526594805637, 0.99192497827544046, 0.64540638490654978, 0.13164517363887571, 0.66543640824090833, 0.36044578508344149, 0.36380024308472403, 0.66057364296918308, 0.36197235950562401, 0.72983412129662639, 0.35341979367809073, 0.72191614800502935, 0.28802522888046805, 0.14258032089847694, 0.10951293589138106, 0.095766694520897117, 0.51741424717941187, 0.87670234151514714, 0.34166498632165943, 0.56749294446233911, 0.49609345939487981, 0.029424822504989706, 0.8692840910623626, 0.15670650337892658, 0.13969134152069534, 0.40571470918817176, 0.23659356620139194, 0.44105108163766671, 0.2880915417924943, 0.76352065126173485, 0.11609431798164148, 0.89980850786904898, 0.83797316447605985, 0.43631895525832809, 0.16837151654731969, 0.12496519589233426, 0.089641811930225315, 0.78726695635322363, 0.91249234142236135, 0.61257834001091516, 0.038855610501088315, 0.63299311403279934, 0.52193676986962867, 0.82104817274060016, 0.42768250614044179, 0.55653257401096901;
TEST_VECTOR_NEAR(p, p_true, 1e-3);
}

/* End of lmm Tests */

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
